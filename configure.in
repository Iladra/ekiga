AC_INIT(ekiga, 2.1.0, http://bugzilla.gnome.org/enter_bug.cgi?product=ekiga)
AC_CANONICAL_TARGET
AC_PREREQ(2.53)
AC_CONFIG_SRCDIR(src/gui/main.cpp)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)


dnl ###########################################################################
dnl   Ekiga/GnomeMeeting Version
dnl ###########################################################################

MAJOR_VERSION=2
MINOR_VERSION=1
BUILD_TYPE=ReleaseCode
BUILD_NUMBER=0

AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION,[fix])
AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION,[fix])
AC_DEFINE_UNQUOTED(BUILD_TYPE, $BUILD_TYPE,[fix])
AC_DEFINE_UNQUOTED(BUILD_NUMBER, $BUILD_NUMBER,[fix])


dnl ###########################################################################
dnl Disable GNOME support
dnl ###########################################################################
AC_ARG_ENABLE(gnome,
        [  --disable-gnome        Remove GNOME support. Don't do this, it removes essential features],,)
if test "x${enable_gnome}" = "x" ; then
  enable_gnome=yes
fi

AC_MSG_CHECKING(whether GNOME support must be compiled in)
if test ${enable_gnome} = no; then
   AC_MSG_RESULT([no])
else
   AC_MSG_RESULT([yes])
fi
AM_CONDITIONAL(DISABLE_GNOME, test ${enable_gnome} = no)
AM_CONDITIONAL(HAVE_GNOME_DOC_UTILS, test ${enable_doc} = no)

dnl ###########################################################################
dnl   Gnome-Doc-Utils
dnl ###########################################################################
AC_ARG_ENABLE(doc,
        [  --disable-doc          Do not build documentation.],,)
if test "x${enable_doc}" = "x" ; then
  enable_doc=yes
fi

AC_MSG_CHECKING(whether documentation should be built)
if test ${enable_doc} = no; then
   AC_MSG_RESULT([no])
else
   AC_MSG_RESULT([yes])
fi

if test ${enable_gnome} = yes && test ${enable_doc} = yes; then
GNOME_DOC_INIT
else
ENABLE_SK_TRUE="#"
ENABLE_SK_FALSE=""
fi

AM_CONDITIONAL(DISABLE_DOC, test ${enable_doc} = no)


dnl ###########################################################################
dnl   Misc
dnl ###########################################################################

IT_PROG_INTLTOOL([0.35.0])

AM_PROG_LIBTOOL

AC_PROG_CC
AC_PROG_CXX
AC_ISC_POSIX
AC_HEADER_STDC

AC_CHECK_DECLS(strcasecmp)


dnl ###########################################################################
dnl This is to check correct gconf installation
dnl ###########################################################################
SCHEMA_AGE=61
AC_SUBST(SCHEMA_AGE)


dnl ###########################################################################
dnl GConf related settings
dnl ###########################################################################
if test ${enable_gnome} = no ; then
AM_CONDITIONAL(GCONF_SCHEMAS_INSTALL, false)
else
AM_GCONF_SOURCE_2
fi


dnl ###########################################################################
dnl PKG_CONFIG and required versions
dnl ###########################################################################
PKG_PROG_PKG_CONFIG

if test ${enable_gnome} = no; then
PKG_CHECK_MODULES(EKIGA, gtk+-2.0 >= 2.6.0 gthread-2.0 >= 2.4.0 libxml-2.0 >= 2.5.0)
EKIGA_CFLAGS="$EKIGA_CFLAGS -DDISABLE_GNOME"
else
PKG_CHECK_MODULES(EKIGA, gtk+-2.0 >= 2.6.0 gthread-2.0 >= 2.4.0 gconf-2.0 >= 2.2.0 libgnome-2.0 >= 2.14.0 libgnomeui-2.0 >= 2.14.0)
PKG_CHECK_MODULES(EDS, libebook-1.2 >= 1.1.3,ebook12=yes,ebook12=no)
if test x"${ebook12}" = xno ; then
PKG_CHECK_MODULES(EDS, libebook-1.0 >= 0.0.94)
fi
EKIGA_CFLAGS="$EKIGA_CFLAGS $EDS_CFLAGS"
EKIGA_LIBS="$EKIGA_LIBS $EDS_LIBS"
fi

dnl for finegranulated including
PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.6)
PKG_CHECK_MODULES(GMODULE, gmodule-2.0)
PKG_CHECK_MODULES(GOBJECT, gobject-2.0)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GMODULE_LIBS)
AC_SUBST(GOBJECT_LIBS)

dnl Check if GtkStatusIcon can be used (requires at least GTK 2.10)
PKG_CHECK_EXISTS([gtk+-2.0 >= 2.10],[have_gtk_2_10=yes],[have_gtk_2_10=no])
AM_CONDITIONAL([HAVE_GTK_2_10],[test "x$have_gtk_2_10" = "xyes"])

PWLIB_REC_VERSION="1.11.3"
OPAL_REC_VERSION="2.3.2"


dnl ###########################################################################
dnl Scrollkeeper
dnl ###########################################################################
if test ${enable_gnome} = yes ; then
AC_PATH_PROG(SK_CONFIG,scrollkeeper-config,no)
if test x$SK_CONFIG = xno; then
AC_MSG_ERROR(Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net)
fi
fi


dnl ###########################################################################
dnl Set up Operating System specific parameters and endianess
dnl ###########################################################################

dnl Check the OS type (more types can be added) 
AC_MSG_CHECKING(whether OS type is supported)
win32=0

case $target_os in

  solaris*)
    ARCH_OPAL_CFLAGS="-DPTRACING -DNDEBUG -DSOLARIS -g "
    ARCH_OPAL_LIBS="-lpt -lopal -ldl -lpthread"
    AC_MSG_RESULT([yes])
    gm_platform="solaris"
    ;;

  linux-gnu | linux | Linux)
    ARCH_OPAL_CFLAGS="-DPTRACING -DNDEBUG -Wall -Os -g -fno-exceptions -felide-constructors"
    ARCH_OPAL_LIBS="-lpt -lopal -ldl -lpthread"
    AC_MSG_RESULT([yes])
    gm_platform="linux"

dnl if debug add this and link to -lh323_linux_x86_d -lpt_linux_x86_d
dnl -D_DEBUG -DPMEMORY_CHECK=1 -DPTRACING -g
    ;;

  FreeBSD* | freebsd* )
    ARCH_OPAL_CFLAGS="-DPTRACING -DNDEBUG -Wall -Os -g"
    ARCH_OPAL_LIBS="-lpt -lopal -lpthread"
    AC_MSG_RESULT([yes])
    gm_platform="freebsd"
    ;;

  darwin* )
    ARCH_OPAL_CFLAGS="-Os -Wall -DPTRACING -DNDEBUG -DNO_LONG_DOUBLE -DSTATIC_LIBS_USED"
    ARCH_OPAL_LIBS="-multiply_defined suppress -lh323_Darwin_ppc_r_s -lpt_Darwin_ppc_r_s -lssl -lcrypto -lX11 -framework AudioToolbox -framework CoreAudio -framework CoreServices"
    AC_MSG_RESULT([yes])
    gm_platform="macosx"
    ;;

  mingw* )
    ARCH_OPAL_CFLAGS="-Wall -mms-bitfields -DPTRACING -DSTATIC_LIBS_USED"
    ARCH_OPAL_LIBS="-mwindows -enable-auto-import -enable-runtime-pseudo-reloc -enable-stdcall-fixup -lpt -lopal -lwinmm -lwsock32 -lsnmpapi -lmpr -lcomdlg32"
    AC_MSG_RESULT([not really])
    gm_platform="mingw"
    win32=1
    ;;

  *)
    AC_MSG_ERROR([Only Linux, FreeBSD, Solaris and Mac OS X are supported. Please contact the author to know how you can add more OS types.])
    ;;
esac

AM_CONDITIONAL(WIN32, test "x${win32}" = "x1")

dnl ###########################################################################
dnl   Check for Esound and disable-esd
dnl ###########################################################################
AC_ARG_ENABLE(esd,
        [  --disable-esd        Enable Esound support.],,)
if test "x${enable_esd}" = "x"; then
  enable_esd=yes
fi

AC_MSG_CHECKING(whether Esound support must be compiled in)
if test ${enable_esd} = yes ; then
   ESD="enabled"
   AC_MSG_RESULT([yes])
else
   ESD="disabled"
   AC_MSG_RESULT([no])
fi

if test ${enable_esd} = yes ; then
   dnl Esound does not work on Win32 yet, so disable it
	if test ${gm_platform} = "win32" ; then
	   ESD="disabled"
	   AC_MSG_WARN([*** Esound cannot be used on Win32.])
	else
	   PKG_CHECK_MODULES(ESD, esound >= 0.2.28)
	   AC_SUBST(ESD_CFLAGS)
	   AC_SUBST(ESD_LIBS)
	   EKIGA_CFLAGS="$EKIGA_CFLAGS $ESD_CFLAGS -DHAS_ESD"
	   EKIGA_LIBS="$EKIGA_LIBS $ESD_LIBS"
	fi
fi
AM_CONDITIONAL(HAS_ESD, test ${enable_esd} = yes)

dnl ###########################################################################
dnl  Check for library path
dnl ###########################################################################
case $host in

*-*-linux*)
  # Test if the compiler is 64bit
  echo 'int i;' > conftest.$ac_ext
  ekiga_cv_cc_64bit_output=no

  if AC_TRY_EVAL(ac_compile); then
    case `/usr/bin/file conftest.$ac_objext` in

    *"ELF 64"*)
    ekiga_cv_cc_64bit_output=yes      
    ;;
    
    esac
  fi

  rm -rf conftest*  
;;
esac

case $host_cpu:$ekiga_cv_cc_64bit_output in
powerpc64:yes | s390x:yes | sparc64:yes | x86_64:yes)
libname="lib64"  
;;
*:*)  
libname="lib"  
;;
esac


dnl ###########################################################################
dnl PWLib Headers and Libraries
dnl ###########################################################################
AC_ARG_WITH(pwlib-dir, [  --with-pwlib-dir=PFX   Location of PWLib], with_pwlib_dir="$withval", with_pwlib_dir="/usr")

dnl Check for the includes presence
AC_MSG_CHECKING(for PWLib includes in ${with_pwlib_dir}/include/)
AC_MSG_RESULT()

CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I${with_pwlib_dir}/include/ptlib"
AC_CHECK_FILE(${with_pwlib_dir}/include/ptlib/pprocess.h, pwlib_includes="yes", pwlib_includes="no")
if test "x${pwlib_includes}" != "xno" ; then
	PWLIB_CFLAGS="-I${with_pwlib_dir}/include/ptlib -I${with_pwlib_dir}/include/ptclib"
	if test "x${with_pwlib_dir}" != "x/usr"; then
		PWLIB_CFLAGS="${PWLIB_CFLAGS} -I${with_pwlib_dir}/include"
	fi	
fi
CPPFLAGS="$CPPFLAGS_save"

if test "x${pwlib_includes}" = "xno" ; then
	AC_MSG_ERROR(You need the PWLib headers to compile Ekiga)
fi

dnl Checking for the library presence
LDFLAGS_save="$LDFLAGS"
AC_LANG(C++)
LDFLAGS="$LDFLAGS -L${with_pwlib_dir}/${libname}/"
AC_CHECK_LIB(pt, read, pwlib_libs="yes", pwlib_libs="no")
LDFLAGS="${LDFLAGS_save}"

if test "x${pwlib_libs}" != "xno"; then
	if test "x${with_pwlib_dir}" != "x/usr"; then
		PWLIB_LIBS="-L${with_pwlib_dir}/${libname}"
	fi
else
	AC_MSG_ERROR(You need the PWLib library to compile Ekiga)
fi

dnl Checking for PWLib version
CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $PWLIB_CFLAGS"
AC_MSG_CHECKING(for PWLib version);
AC_EGREP_CPP(${PWLIB_REC_VERSION},
	     [#include <ptbuildopts.h>
	      PWLIB_VERSION 
	     ],AC_MSG_RESULT(${PWLIB_REC_VERSION}), AC_MSG_ERROR(Sorry but the recommended PWLib version is ${PWLIB_REC_VERSION}))
CPPFLAGS="$CPPFLAGS_save"

dnl Checking for OpenLDAP support in PWLIB
CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $PWLIB_CFLAGS"
AC_MSG_CHECKING(for OpenLDAP support in PWLIB);
AC_EGREP_CPP(ekiga_ldap_test *= *1,
	     [#include <ptbuildopts.h>
	      ekiga_ldap_test=P_LDAP
	     ],AC_MSG_RESULT(yes), [ AC_MSG_RESULT(no);
	AC_MSG_ERROR(Sorry but the PWLib version you are using doesn't support LDAP)])
CPPFLAGS="$CPPFLAGS_save"

dnl Check for ptlib-config
AC_LANG(C)
AC_CHECK_FILE(${with_pwlib_dir}/bin/ptlib-config, HAS_PTLIB_CONFIG=1)
if test "x${HAS_PTLIB_CONFIG}" != "x1" ; then
        AC_MSG_ERROR([Sorry but ptlib-config can not be found, please check your installation]);
else
        AC_PATH_PROG(PTLIB_CONFIG, ptlib-config, , ${with_pwlib_dir}/bin/)
fi
ARCH_OPAL_CFLAGS="$ARCH_OPAL_CFLAGS `$PTLIB_CONFIG --ccflags`"
                  

dnl ###########################################################################
dnl Opal Headers and Libraries
dnl ###########################################################################
AC_ARG_WITH(opal-dir, [  --with-opal-dir=PFX   Location of Opal], with_opal_dir="$withval", with_opal_dir="/usr")

dnl Check for the includes presence
AC_MSG_CHECKING(for Opal includes in ${with_opal_dir}/include/)
AC_MSG_RESULT()

CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I${with_opal_dir}/include/opal"
AC_CHECK_FILE(${with_opal_dir}/include/opal/opal/call.h, opal_includes="yes", opal_includes="no")
if test "x${opal_includes}" != "xno" ; then
	OPAL_CFLAGS="-I${with_opal_dir}/include/opal"
fi
CPPFLAGS="$CPPFLAGS_save"

if test "x${opal_includes}" = "xno" ; then
CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I${with_opal_dir}/include"
AC_CHECK_FILE(${with_opal_dir}/include/opal/call.h, opal_includes="yes", opal_includes="no")
if test "x${opal_includes}" != "xno" ; then
	OPAL_CFLAGS="-I${with_opal_dir}/include"
fi
CPPFLAGS="$CPPFLAGS_save"
fi

if test "x${opal_includes}" = "xno" ; then
	AC_MSG_ERROR(You need the Opal headers to compile Ekiga)
fi

dnl Checking for the library presence
LIBS_save="$LIBS"
LIBS="${LIBS} -L${with_opal_dir}/${libname}/ -L${with_pwlib_dir}/${libname}/ -lpt"
AC_CHECK_LIB(opal, main, opal_libs="yes", opal_libs="yes")
LIBS="${LIBS_save}"

if test "x${opal_libs}" != "xno"; then
	if test "x${with_opal_dir}" != "x/usr"; then
		OPAL_LIBS="-L${with_opal_dir}/lib"
	fi
else
	AC_MSG_ERROR(You need the Opal library to compile Ekiga)
fi

dnl Checking for Opal version
CPPFLAGS_save="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $OPAL_CFLAGS"
AC_MSG_CHECKING(for Opal version);
AC_EGREP_CPP(${OPAL_REC_VERSION},
	     [#include <opal/buildopts.h>
	      OPAL_VERSION 
	     ],AC_MSG_RESULT(${OPAL_REC_VERSION}), AC_MSG_ERROR(Sorry but the recommended OPAL version is ${OPAL_REC_VERSION}))
CPPFLAGS="$CPPFLAGS_save"


dnl ###########################################################################
dnl Checks for Xv extension
dnl ###########################################################################

if test ${gm_platform} = "linux" ; then
AC_ARG_ENABLE(xv,
     [  --disable-xv        Disable XVideo hardware acceleration],,)
if test "x${enable_xv}" = "x" ; then
   enable_xv=yes
   AC_CHECK_LIB(Xv, XvShmCreateImage, xv_libs="yes", xv_libs="no")
   if test "x${xv_libs}" != "xno"; then
           X_LIBS="$X_LIBS -lXv"
           EKIGA_CFLAGS="$EKIGA_CFLAGS -DHAS_XV"
           HAS_XV="enabled"
           AM_CONDITIONAL([HAS_XV], [true])
   else
           HAS_XV="disabled"
           AM_CONDITIONAL([HAS_XV],[false])
           enable_xv=no
   fi
else
           HAS_XV="disabled"
           AM_CONDITIONAL([HAS_XV],[false])

fi
fi

dnl ###########################################################################
dnl LDAP Headers and Libraries
dnl ###########################################################################
dnl AC_ARG_WITH(ldap-dir, [  --with-ldap-dir=PFX   Location of LDAP], with_ldap_dir="$withval", with_ldap_dir="/usr")

dnl Check for the includes presence
dnl AC_MSG_CHECKING(for LDAP includes in ${with_ldap_dir}/include/)
dnl AC_MSG_RESULT()

dnl CPPFLAGS_save="$CPPFLAGS"
dnl CPPFLAGS="$CPPFLAGS -I${with_ldap_dir}/include"
dnl AC_CHECK_FILE(${with_ldap_dir}/include/ldap.h, ldap_includes="yes", ldap_includes="no")
dnl CPPFLAGS="$CPPFLAGS_save"
	
dnl if test "x${ldap_includes}" != "xno" ; then
dnl 	LDAP_CFLAGS="-I${with_ldap_dir}/include"
dnl else
dnl 	AC_MSG_ERROR(You need the LDAP headers to compile Ekiga)
dnl fi

dnl Checking for the library presence
dnl LIBS_save="$LIBS"
dnl LIBS="${LIBS} -L${with_ldap_dir}/${libname}/ -llber"
dnl AC_CHECK_LIB(ldap, main, ldap_libs="yes", ldap_libs="no")
dnl LIBS="${LIBS_save}"

dnl if test "x${ldap_libs}" != "xno"; then
dnl 	LDAP_LIBS="-llber -lldap"
dnl 	if test "x${with_ldap_dir}" != "x/usr"; then
dnl 		LDAP_LIBS="-L${with_ldap_dir}/${libname} $LDAP_LIBS"
dnl 	fi
dnl else
dnl 	AC_MSG_ERROR(You need the LDAP library to compile Ekiga)
dnl fi

dnl Checking for libresolv
dnl if test ${gm_platform} = "linux" ; then
dnl 	AC_CHECK_LIB(resolv, res_gethostbyaddr, [LIBS="-lresolv $LIBS"], AC_MSG_ERROR([*** libresolv not found.]), -lresolv)
dnl 	LDAP_LIBS="${LDAP_LIBS} -lresolv"
dnl fi


dnl #########################################################################  
dnl  Check for recent libxml2 which has xmlRegisterNodeDefault()
dnl ########################################################################   
dnl AC_CHECK_LIB(xml2, xmlFreeDoc)
dnl AC_CHECK_FUNCS(xmlRegisterNodeDefault)


dnl ########################################################################   
dnl  libxml path is in EKIGA_CFLAGS due to pkg-config
dnl ########################################################################   
dnl CPPFLAGS_save="$CPPFLAGS"
dnl CPPFLAGS="$CPPFLAGS $EKIGA_CFLAGS"
dnl AC_CHECK_TYPES(xmlSAXHandlerV1,,, [#include <libxml/SAX.h>])
dnl CPPFLAGS="$CPPFLAGS_save"


dnl #########################################################################
dnl   Check for DBUS
dnl #########################################################################
AC_ARG_ENABLE(dbus,
	[  --disable-dbus      Enable the DBUS component.],,)
if test "x${enable_dbus}" = "x"; then
  enable_dbus=yes
fi

AC_MSG_CHECKING(whether the DBUS component should be compiled in)
if test ${enable_dbus} = yes ; then
   DBUS="enabled"
   AC_MSG_RESULT([yes])
else
   DBUS="disabled"
   AC_MSG_RESULT([no])
fi

if test ${enable_dbus} = yes ; then
   PKG_CHECK_MODULES(DBUS,  dbus-1 >= 0.36 dbus-glib-1 >= 0.36)
   AC_SUBST(DBUS_CFLAGS)
   AC_SUBST(DBUS_LIBS)
   EKIGA_CFLAGS="$EKIGA_CFLAGS $DBUS_CFLAGS -DHAS_DBUS"
   EKIGA_LIBS="$EKIGA_LIBS $DBUS_LIBS"
fi
AM_CONDITIONAL(HAS_DBUS, test ${enable_dbus} = yes)
AM_CONDITIONAL(DBUS_SERVICES_INSTALL, test ${enable_dbus} = yes)


dnl #########################################################################
dnl   Check for Avahi mdns support
dnl #########################################################################
AC_ARG_ENABLE(avahi,
	[--disable-avahi	Disable Avahi support.],,)

if test "${enable_avahi}" = "yes"; then
	PKG_CHECK_MODULES(AVAHI, avahi-client >= 0.6 avahi-glib >= 0.6)
elif test "${enable_avahi}" = ""; then
	PKG_CHECK_MODULES(AVAHI, avahi-client >= 0.6 avahi-glib >= 0.6,
			  enable_avahi=yes, enable_avahi=no)
fi

if test "${enable_avahi}" = "yes"; then
	EKIGA_CFLAGS="$EKIGA_CFLAGS $AVAHI_CFLAGS -DHAS_AVAHI"
	EKIGA_LIBS="$EKIGA_LIBS $AVAHI_LIBS"
	AC_DEFINE(HAS_AVAHI, 1, [Define if Avahi support is enabled.])
	HAS_AVAHI="enabled"
else
	HAS_AVAHI="disabled"
fi
AM_CONDITIONAL(HAS_AVAHI, test x"${HAS_AVAHI}" = xenabled)


dnl ###########################################################################
dnl  The various CFLAGS are merged into EKIGA_CFLAGS and 
dnl  EKIGA_LIB_CFLAGS
dnl ###########################################################################
EKIGA_CFLAGS="$EKIGA_CFLAGS $LDAP_CFLAGS"
EKIGA_LIB_CFLAGS="$EKIGA_CFLAGS"
EKIGA_CFLAGS="$EKIGA_CFLAGS $PWLIB_CFLAGS $LDAP_INCLUDES $OPAL_CFLAGS $LDAP_CFLAGS $ARCH_OPAL_CFLAGS $ESD_CFLAGS"
EKIGA_LIBS="$PWLIB_LIBS $OPAL_LIBS $EKIGA_LIBS $LDAP_LIBS $ARCH_OPAL_LIBS $ESD_LIBS $X_LIBS"


dnl ###########################################################################
dnl For the static library
dnl ###########################################################################
AC_SUBST(EKIGA_LIB_CFLAGS)


dnl #########################################################################
dnl  Support for internationalization
dnl ########################################################################
GETTEXT_PACKAGE=AC_PACKAGE_NAME
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE",[fix])
AM_GLIB_GNU_GETTEXT


AC_SUBST(EKIGA_LDADD)
AC_SUBST(EKIGA_CFLAGS)


dnl #########################################################################
dnl Set PACKAGE_LOCALE_DIR in config.h.
dnl #########################################################################
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale",[fix])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale",[fix])
fi


dnl ###########################################################################
dnl  Data and configuration directories for the system
dnl ###########################################################################
gnomedatadir=`eval "echo ${datadir}"`
gnomeconfdir=`eval "echo ${sysconfdir}"`
AC_SUBST(gnomedatadir)
AC_SUBST(gnomeconfdir)
                                                                                        
dnl ###########################################################################
dnl  Output the different Makefiles
dnl ###########################################################################
AC_OUTPUT(
Makefile
src/ekiga-config-tool
AC_PACKAGE_NAME.schemas.in
AC_PACKAGE_NAME.desktop.in
net.ekiga.instance.service
net.ekiga.helper.service
lib/Makefile
lib/druid/Makefile
lib/gmconf/Makefile
lib/gmcontacts/Makefile
lib/gui/Makefile
lib/gui/gmtray/Makefile
lib/toolbox/Makefile
lib/base/Makefile
lib/platform/Makefile
po/Makefile.in
man/Makefile
src/Makefile
pixmaps/Makefile
sounds/Makefile
help/Makefile
plugins/Makefile)

dnl ###########################################################################
dnl Summary
dnl ###########################################################################

echo ""
echo "================ Final configuration ==================="
echo "          Installing into prefix  :  $prefix"
echo ""
echo "                 OPAL Version is  :  $OPAL_REC_VERSION"
echo "               OPAL Directory is  :  $with_opal_dir"
echo "                PWLIB Version is  :  $PWLIB_REC_VERSION"
echo "              PWLIB Directory is  :  $with_pwlib_dir"
echo "                 ptlib-config is  :  $with_pwlib_dir/bin/ptlib-config"
echo ""
echo "                  XVideo support  :  $HAS_XV"
echo "                  Esound support  :  $ESD"
echo "                    DBUS support  :  $DBUS"
echo "             mDNS/DNS-SD support  :  $HAS_AVAHI"
echo ""
echo "                         OS Type  :  $target_os"
echo "                    Machine Type  :  $target_cpu"
echo ""
echo " If all settings are OK, type make and make install "
echo "========================================================"
